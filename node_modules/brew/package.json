{
  "_args": [
    [
      {
        "raw": "brew",
        "scope": null,
        "escapedName": "brew",
        "name": "brew",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/sidpochampally/projects/test"
    ]
  ],
  "_from": "brew@latest",
  "_id": "brew@0.0.8",
  "_inCache": true,
  "_location": "/brew",
  "_npmUser": {
    "name": "malgorithms",
    "email": "ccoyne77@gmail.com"
  },
  "_npmVersion": "1.3.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "brew",
    "scope": null,
    "escapedName": "brew",
    "name": "brew",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/brew/-/brew-0.0.8.tgz",
  "_shasum": "0418840ef1526f0eb5301ed31f22848d71624c6f",
  "_shrinkwrap": null,
  "_spec": "brew",
  "_where": "/Users/sidpochampally/projects/test",
  "author": {
    "name": "Chris Coyne",
    "email": "ccoyne77@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/malgorithms/brew/issues"
  },
  "dependencies": {},
  "description": "A NodeJS module for compiling and packaging together files with async updates.",
  "devDependencies": {
    "coffee-script": "*",
    "iced-coffee-script": "*"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "0418840ef1526f0eb5301ed31f22848d71624c6f",
    "tarball": "https://registry.npmjs.org/brew/-/brew-0.0.8.tgz"
  },
  "homepage": "https://github.com/malgorithms/brew#readme",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/malgorithms/brew/raw/master/LICENSE"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "malgorithms",
      "email": "ccoyne77@gmail.com"
    }
  ],
  "name": "brew",
  "optionalDependencies": {},
  "readme": "# BREW\n\nBrew is a NodeJS class that keeps source files compiled and bundled, available in memory. For examples:\n\n* Keeping a bunch of `style`, `less`, and/or `css` files compiled into a single chunk of css.\n* Compiling front-end `coffee` and `js` into a single `js` package.\n* Compiling templates from `toffee`, `eco`, or whatever into js\n* Heck, any other kind of compiling you want\n\nWhat brew does:\n\n* It monitors files and directories you specify, asynchronously\n* If any file changes or disappears, or if a new one is introduced, the brew's version hash changes and a compile is triggered\n* It uses an async `compile` function you provide on all matching files, which can do whatever you want\n* It joins the compiles using an async `join` function you provide\n* It can optionally compress results, with an async `compress` function you provide.\n\nBasically: it decouples all this annoying file monitoring from your important compile, join, and compress steps.\n\n### Installation\n\n```\nnpm install -g brew\n```\n\n### Example\n\nThe following example in coffeescript just monitors 2 directories (and all their subdirs) full of `.js` files \nand combines them together into a single `.js` file. The ordering of the includes matters, and in this example a certain file is singled out\nto be first, even though it's also requested in one of the later directories.\n\n```coffee-script\n\nbrew = require('brew').brew\n\nmy_tasty_brew = new brew {\n  includes: [\n      \"./js/bar/1.js\"\n      \"./js/foo/\"\n      \"./js/bar/\"\n    ]\n  excludes: [\n    \"./js/bar/bad_code.js\"\n    \"./js/foo/bad_dir/\"\n  ]\n  match:      /^.*\\.js$/ # don't compile anything unless it ends in .js \n  compile:    (path, txt, cb)              -> cb null, txt                            # the trivial compile\n  join:       (strs, cb)                   -> cb null, (strs.join \"\\n\")               # the trivial join\n  compress:   (str,  cb)                   -> cb null, str.replace /[ \\n\\t\\r]+/g, ' ' # strip extra whitespace\n  onChange:   (vhash, txt, compressed_txt) -> console.log \"the brew has changed; version hash = #{vhash}\"\n  onReady:    (vhash, txt, compressed_txt) -> console.log \"the brew is ready;    version hash = #{vhash}\"\n}\n````\n\nOnce a brew is ready (you've gotten an onReady call), you can access its compiled text and version numbers at any time:\n\n```coffee-script\nvh   = my_tasty_brew.getVersionHash()\ntxt  = my_tasty_brew.getCompiledText() \nctxt = my_tasty_brew.getCompressedText() \n````\n\n### The parameters, explained\n\n* `includes`: this should be an array containing directories and/or files. Order matters. If a file qualifies twice, its priority will be determined by its first mention or ancestor directory mention.\n* `exclude`:  (optional) files and directories to ignore.\n* `match`:    (optional) a file will only be compiled/included if its name matches this regexp.\n* `compile`:  (optional) your compile function is called on every matching file. You should call back with `err, txt`; the default compile function leaves text unmolested.\n* `join`:     (optional) your join function gets an array of all the compiled texts and is responsible for turning them into one new text. Note that you may wish to do final compilation here, too. For example, with a `less` compilation, you might prefer to do nothing in `compile` but just join them all together and compile the results here.\n* `compress`: (optional) your compress function takes the final joined string, and calls back with a new string, compressed. If you provide a compress function, this allows you to call getCompressedText()\n* `onReady`:  brew calls this once it has made its first pass and compiled & joined everything\n* `onChange`: (optional) this function is called if a version hash changes\n* `logger`:   (optional) if you provide a logger function, brew will pass all kinds of verbose lines of text to it. Your logger function shuould take one parameter, a string.\n\n\n### What is the \"version_hash\" exactly?\n\nIt's just an 8 character hex string, representing the results of all your files compiled and joined together. If you change a file, this\nhash will change. You can use it for cache-busting, versioning, whatever.\n\n### Any tips/suggestions?\n\nYes!\n\n* In your compile function, depending on the output, consider auto-inserting a comment with the name of the source file.\n* In your join function, consider performing a minimization in production but not in dev.\n* In your onChange function, consider writing the result to the file system!\n* Try using brew directly in your web process and use its `getCompiledText()` results to reply to users' requests for JS/CSS/whatever, cutting the filesystem out.\n\n## Contributing/making changes\n\n* You'll need iced-coffee-script: `npm install -g iced-coffee-script`\n* You'll need coffee-script: `npm install -g coffee-script`\n* Compile by running `cake build`\n* Do not edit `.js` files directly, as they're generated by cake.\n\n\n### My TODO\n\n* pipeline building\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/malgorithms/brew.git"
  },
  "version": "0.0.8"
}
